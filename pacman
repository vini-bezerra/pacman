import random
from abc import ABCMeta, abstractmethod
import pygame

pygame.init()

tela = pygame.display.set_mode((800, 600), 0)
fonte_score = pygame.font.SysFont('arial', 24, True, False)
fonte_pause = pygame.font.SysFont('arial', 100, True, False)
vermelho = (255, 0, 0)
amarelo = (255, 255, 0)
preto = (0, 0, 0)
azul = (0, 0, 255)
branco = (255, 255, 255)
ciano = (0, 255, 255)
laranja = (255, 100, 0)
rosa = (255, 192, 203)
acima = 1
abaixo = 2
direita = 3
esquerda = 4


class ElementoJogo(metaclass=ABCMeta):

    @abstractmethod
    def calcular_regra(self):
        pass

    @abstractmethod
    def pintar(self, screen):
        pass

    @abstractmethod
    def processar_eventos(self, events):
        pass


class Movivel(metaclass=ABCMeta):

    @abstractmethod
    def aceitar_movimento(self):
        pass

    @abstractmethod
    def recusar_movimento(self, direcoes):
        pass

    @abstractmethod
    def esquina(self, direcoes):
        pass


class Cenario(ElementoJogo):
    def __init__(self, size, pac):
        self.pacman = pac
        self.moviveis = []
        # Estados possíveis:
        # Jogando = 0
        # Pausado = 1
        # GameOver = 2
        # Vitória = 3
        self.estado = 0
        self.tamanho = size
        self.pontos = 0
        self.vidas = 5
        self.matriz = [
            [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2],
            [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],
            [2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2],
            [2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2],
            [2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2],
            [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],
            [2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2],
            [2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2],
            [2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2],
            [2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2],
            [2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2],
            [2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2],
            [2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 0, 0, 0, 0, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2],
            [2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2],
            [2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 2, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2],
            [2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 0, 0, 0, 0, 0, 0, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2],
            [2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2],
            [2, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 2],
            [2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2],
            [2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2],
            [2, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 2],
            [2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2],
            [2, 1, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 1, 2],
            [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],
            [2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2],
            [2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 1, 1, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2],
            [2, 1, 2, 2, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 1, 2, 2, 2, 2, 2, 1, 2, 2, 2, 2, 1, 2],
            [2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2, 2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2],
            [2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2]
        ]

    def adicionar_movivel(self, movivel):
        self.moviveis.append(movivel)

    def pintar_pontos(self, screen):
        pontos_x = 30 * self.tamanho
        texto = f'Score: {self.pontos}'
        img_pontos = fonte_score.render(texto, True, amarelo)
        screen.blit(img_pontos, (pontos_x, 20))

    def pintar_vidas(self, screen):
        pontos_x = 30 * self.tamanho
        texto = f'Lifes: {self.vidas}'
        img_pontos = fonte_score.render(texto, True, amarelo)
        screen.blit(img_pontos, (pontos_x, 50))

    def pintar_linha(self, screen, numero_linha, linha):
        for numero_coluna, coluna in enumerate(linha):
            x = numero_coluna * self.tamanho
            y = numero_linha * self.tamanho
            half = self.tamanho // 2
            cor = preto

            if coluna == 2:
                cor = azul

            pygame.draw.rect(screen, cor, (x, y, self.tamanho, self.tamanho), 0)

            if coluna == 1:
                pygame.draw.circle(screen, amarelo, (x + half, y + half), self.tamanho // 10, 0)

    def pintar(self, screen):
        if self.estado == 0:
            self.pintar_jogando(screen)
        elif self.estado == 1:
            self.pintar_jogando(screen)
            self.pintar_pausado(screen)
        elif self.estado == 2:
            self.pintar_jogando(screen)
            self.pintar_gameover(screen)
        elif self.estado == 3:
            self.pintar_jogando(screen)
            self.pintar_vitoria(screen)

    def pintar_texto_centro(self, screen,  texto):
        img_texto = fonte_pause.render(texto, True, amarelo)
        texto_x = (screen.get_width() - img_texto.get_width()) // 2
        texto_y = (screen.get_height() - img_texto.get_height()) // 2
        screen.blit(img_texto, (texto_x, texto_y))

    def pintar_vitoria(self, screen):
        self.pintar_texto_centro(screen, 'V I T Ó R I A')

    def pintar_gameover(self, screen):
        self.pintar_texto_centro(screen, 'G A M E O V E R')

    def pintar_pausado(self, screen):
        self.pintar_texto_centro(screen, 'P A U S A D O')

    def pintar_jogando(self, screen):
        for numero_linha, linha in enumerate(self.matriz):
            self.pintar_linha(screen, numero_linha, linha)
        self.pintar_pontos(screen)
        self.pintar_vidas(screen)

    def get_direcoes(self, linha, coluna):
        direcoes = []
        if self.matriz[int(linha - 1)][int(coluna)] != 2:
            direcoes.append(acima)
        if self.matriz[int(linha + 1)][int(coluna)] != 2:
            direcoes.append(abaixo)
        if self.matriz[int(linha)][int(coluna - 1)] != 2:
            direcoes.append(esquerda)
        if self.matriz[int(linha)][int(coluna + 1)] != 2:
            direcoes.append(direita)
        return direcoes

    def calcular_regra(self):
        if self.estado == 0:
            self.calcular_regra_jogando()
        elif self.estado == 1:
            self.calcular_regra_pausado()
        elif self.estado == 2:
            self.calcular_regra_gameover()

    def calcular_regra_gameover(self):
        pass

    def calcular_regra_pausado(self):
        pass

    def calcular_regra_jogando(self):

        for movivel in self.moviveis:
            lin = int(movivel.linha)
            col = int(movivel.coluna)
            lin_intencao = int(movivel.linha_intencao)
            col_intencao = int(movivel.coluna_intencao)
            direcoes = self.get_direcoes(lin, col)

            if len(direcoes) >= 3:
                movivel.esquina(direcoes)
            if isinstance(movivel, Fantasma) and movivel.linha == self.pacman.linha and movivel.coluna == self.pacman.coluna:
                self.vidas -= 1
                if self.vidas <= 0:
                    self.estado = 2
                else:
                    self.pacman.linha = 1
                    self.pacman.coluna = 1
            else:
                if 0 <= col_intencao < 28 and 0 <= lin_intencao < 29 and self.matriz[lin_intencao][col_intencao] != 2:
                    movivel.aceitar_movimento()
                    if isinstance(movivel, Pacman) and self.matriz[lin][col] == 1:
                        self.pontos += 1
                        self.matriz[lin][col] = 0
                        if self.pontos == 306:
                            self.estado = 3
                else:
                    movivel.recusar_movimento(direcoes)

    def processar_eventos(self, evts):
        for e in evts:
            if e.type == pygame.QUIT:
                exit()
            if e.type == pygame.KEYDOWN:
                if e.key == pygame.K_p:
                    if self.estado == 0:
                        self.estado = 1
                    else:
                        self.estado = 0


class Pacman(ElementoJogo, Movivel):
    def __init__(self, size):
        self.coluna = 1
        self.linha = 1
        self.posicao_x = 200
        self.posicao_y = 300
        self.tamanho = size
        self.raio = self.tamanho // 2
        self.velocidade_x = 0
        self.velocidade_y = 0
        self.coluna_intencao = self.coluna
        self.linha_intencao = self.linha
        self.abertura = 0
        self.velocidade_abertura = 1

    def calcular_regra(self):
        self.coluna_intencao += self.velocidade_x
        self.linha_intencao += self.velocidade_y
        self.posicao_x = int(self.coluna * self.tamanho + self.raio)
        self.posicao_y = int(self.linha * self.tamanho + self.raio)

    def pintar(self, screen):
        # Desenhar o corpo do pacman
        pygame.draw.circle(screen, amarelo, (self.posicao_x, self.posicao_y), self.raio, 0)

        self.abertura += self.velocidade_abertura
        if self.abertura > self.raio:
            self.velocidade_abertura = -1
        if self.abertura <= 0:
            self.velocidade_abertura = 1

        # Desenho da boca do pacman
        canto_boca = (self.posicao_x, self.posicao_y)
        labio_superior = (self.posicao_x + self.raio, self.posicao_y - self.abertura)
        labio_inferior = (self.posicao_x + self.raio, self.posicao_y + self.abertura)
        pontos = [canto_boca, labio_superior, labio_inferior]

        pygame.draw.polygon(tela, preto, pontos, 0)

        # Desenho do olho do pacman
        olho_x = int(self.posicao_x + self.raio / 3)
        olho_y = int(self.posicao_y - self.raio / 1.5)
        olho_raio = int(self.raio / 10)

        pygame.draw.circle(tela, preto, (olho_x, olho_y), olho_raio, 0)

    def processar_eventos(self, events):
        for event in events:

            if event.type == pygame.KEYDOWN:
                # Se clicar na seta da direita
                if event.key == pygame.K_RIGHT:
                    self.velocidade_x = 1
                # Se clicar para a seta da esquerda
                if event.key == pygame.K_LEFT:
                    self.velocidade_x = -1
                # Se clicar para a seta de cima
                if event.key == pygame.K_UP:
                    self.velocidade_y = -1
                # Se clicar para a seta de baixo
                if event.key == pygame.K_DOWN:
                    self.velocidade_y = 1

            elif event.type == pygame.KEYUP:
                # Se soltar o botão para a seta da direita
                if event.key == pygame.K_RIGHT:
                    self.velocidade_x = 0
                # Se soltar o botão para a seta da esquerda
                if event.key == pygame.K_LEFT:
                    self.velocidade_x = 0
                # Se soltar o botão para a seta de cima
                if event.key == pygame.K_UP:
                    self.velocidade_y = 0
                # Se soltar o botão para a seta de baixo
                if event.key == pygame.K_DOWN:
                    self.velocidade_y = 0

    def processar_eventos_mouse(self, events):
        delay = 100
        for event in events:
            if event.type == pygame.MOUSEMOTION:
                mouse_x, mouse_y = event.pos
                self.coluna = (mouse_x - self.posicao_x) / delay
                self.linha = (mouse_y - self.posicao_y) / delay

    def aceitar_movimento(self):
        self.linha = self.linha_intencao
        self.coluna = self.coluna_intencao

    def recusar_movimento(self, direcoes):
        self.linha_intencao = self.linha
        self.coluna_intencao = self.coluna

    def esquina(self, direcoes):
        pass


class Fantasma(ElementoJogo, Movivel):
    def __init__(self, cor, size):
        self.coluna = 13.0
        self.linha = 15.0
        self.linha_intencao = self.linha
        self.coluna_intencao = self.coluna
        self.cor = cor
        self.tamanho = size
        self.velocidade = 1
        self.direcao = 0

    def calcular_regra(self):
        if self.direcao == 1:
            self.linha_intencao -= self.velocidade
        elif self.direcao == 2:
            self.linha_intencao += self.velocidade
        elif self.direcao == 3:
            self.coluna_intencao += self.velocidade
        elif self.direcao == 4:
            self.coluna_intencao -= self.velocidade

    def mudar_direcao(self, direcoes):
        self.direcao = random.choice(direcoes)

    def esquina(self, direcoes):
        self.mudar_direcao(direcoes)

    def aceitar_movimento(self):
        self.linha = self.linha_intencao
        self.coluna = self.coluna_intencao

    def recusar_movimento(self, direcoes):
        self.linha_intencao = self.linha
        self.coluna_intencao = self.coluna
        self.mudar_direcao(direcoes)

    def processar_eventos(self, events):
        pass

    def pintar(self, screen):
        fatia = self.tamanho // 8
        px = int(self.coluna * self.tamanho)
        py = int(self.linha * self.tamanho)
        contorno = [(px, py + self.tamanho),
                    (px + fatia, py + fatia * 2),
                    (px + fatia * 2, py + fatia),
                    (px + fatia * 3, py),
                    (px + fatia * 5, py),
                    (px + fatia * 7, py + fatia),
                    (px + fatia * 8, py + fatia * 2),
                    (px + self.tamanho, py + self.tamanho)]

        olho_raio_ext = fatia
        olho_raio_int = fatia // 2
        olho_e_x = int(px + fatia * 2.5)
        olho_e_y = int(py + fatia * 2.5)
        olho_d_x = int(px + fatia * 5)
        olho_d_y = int(py + fatia * 2.5)

        pygame.draw.polygon(screen, self.cor, contorno, 0)
        pygame.draw.circle(screen, branco, (olho_e_x, olho_e_y), olho_raio_ext, 0)
        pygame.draw.circle(screen, branco, (olho_d_x, olho_d_y), olho_raio_ext, 0)
        pygame.draw.circle(screen, preto, (olho_e_x, olho_e_y), olho_raio_int, 0)
        pygame.draw.circle(screen, preto, (olho_d_x, olho_d_y), olho_raio_int, 0)


if __name__ == "__main__":
    size = 600 // 30
    pacman = Pacman(size)
    blinky = Fantasma(vermelho, size)
    inky = Fantasma(ciano, size)
    clyde = Fantasma(laranja, size)
    pinky = Fantasma(rosa, size)
    cenario = Cenario(size, pacman)
    cenario.adicionar_movivel(pacman)
    cenario.adicionar_movivel(blinky)
    cenario.adicionar_movivel(inky)
    cenario.adicionar_movivel(clyde)
    cenario.adicionar_movivel(pinky)


    while True:
        # Calcular as regras
        pacman.calcular_regra()
        blinky.calcular_regra()
        inky.calcular_regra()
        clyde.calcular_regra()
        pinky.calcular_regra()
        cenario.calcular_regra()

        # Pintar a tela
        tela.fill(preto)
        cenario.pintar(tela)
        pacman.pintar(tela)
        blinky.pintar(tela)
        inky.pintar(tela)
        clyde.pintar(tela)
        pinky.pintar(tela)
        pygame.display.update()
        pygame.time.delay(100)

        # Captura os eventos
        eventos = pygame.event.get()
        pacman.processar_eventos(eventos)
        cenario.processar_eventos(eventos)
